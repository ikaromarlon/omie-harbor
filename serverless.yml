service: fullbpo-bfb
frameworkVersion: '3'
useDotenv: true
configValidationMode: error
deprecationNotificationMode: error
provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.region.${self:provider.stage}}
  profile: fullbpo
  stackName: ${self:custom.basename}
  apiName: ${self:custom.basename}
  memorySize: 128
  timeout: 30
  logRetentionInDays: 7
  deploymentBucket:
    name: ${self:custom.accountId}-deployment-artifacts-${self:provider.region}
    blockPublicAccess: true
    maxPreviousDeploymentArtifacts: 5
  deploymentPrefix: serverless
  versionFunctions: false
  environment:
    SERVICE: ${self:service}
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    DOMAIN: ${self:custom.domain}
    MONGODB_URI: ${env:MONGODB_URI}
    SQS_INGESTION_QUEUE_URL: { 'Ref': 'IngestionQueue'}
    SQS_DATA_EXPORT_QUEUE_URL: { 'Ref': 'DataExportQueue'}
    S3_DATA_EXPORT_BUCKET_NAME: { 'Ref': 'DataExportBucket'}
    SES_REGION: ${self:custom.sesRegion}
    FLAG_LOG_EACH_OMIE_ERROR: ${self:custom.env.FLAG_LOG_EACH_OMIE_ERROR.${self:provider.stage}}
    FLAG_UPDATE_EMPTY_RECORDS: ${self:custom.env.FLAG_UPDATE_EMPTY_RECORDS.${self:provider.stage}}
    ERROR_NOTIFICATION_RECIPIENT_ADDRESS: ${self:custom.env.ERROR_NOTIFICATION_RECIPIENT_ADDRESS.${self:provider.stage}}
    ERROR_NOTIFICATION_RECIPIENT_ADDRESS_COPY: ${self:custom.env.ERROR_NOTIFICATION_RECIPIENT_ADDRESS_COPY.${self:provider.stage}}
  endpointType: EDGE
  apiGateway:
    apiKeySourceType: HEADER
    apiKeys:
      - name: ${self:custom.basename}
        value: ${self:custom.appApiKey.${self:provider.stage}}
        enabled: true
  stackTags:
    COMPANY: FullBPO
    PROJECT: FullBPO
    APP: FullBPO
    SERVICE: ${self:service}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'ses:SendEmail'
          Resource:
            - arn:aws:ses:${self:custom.sesRegion}:${self:custom.accountId}:identity/${self:custom.domain}
      name: ${self:custom.basename}-dafault-role
functions: ${file(./serverless/functions.yml)}
resources: ${file(./serverless/resources.yml)}
custom: ${file(./serverless/custom.yml)}
package:
  excludeDevDependencies: true
  individually: true
  patterns:
    - '!**'
    - 'node_modules/**'
    - 'src/**'
    - '!src/v1/**'
    - 'package.json'
plugins:
  - serverless-iam-roles-per-function
  - serverless-cloudside-plugin
  - serverless-offline