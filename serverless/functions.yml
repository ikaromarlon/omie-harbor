registerOmieCompany:
  handler: src/index.handler
  iamRoleStatementsName: ${self:custom.basename}-registerOmieCompany-role
  events:
    # - schedule: ${self:custom.functionsWarmUpScheduledEvent}
    - http:
        path: omie/register-company
        method: POST
        cors: ${self:custom.httpCors}
        private: false
  package:
    patterns:
      - 'src/v1/registerOmieCompany/**'

omieWebhook:
  handler: src/index.handler
  iamRoleStatementsName: ${self:custom.basename}-omieWebhook-role
  iamRoleStatements:
    - Effect: Allow
      Action:
        - events:PutEvents
      Resource: '*' # set permission to eventbus default or create new one
  events:
    # - schedule: ${self:custom.functionsWarmUpScheduledEvent}
    - eventBridge:
        pattern:
          source:
            - ${self:custom.fullbpoApiSourceName}
          detail-type:
            - ${self:custom.basename}.omieWebhook
  package:
    patterns:
      - 'src/v1/omieWebhook/**'

deleteDataByCompany:
  handler: src/index.handler
  iamRoleStatementsName: ${self:custom.basename}-deleteDataByCompany-role
  iamRoleStatements:
    - Effect: Allow
      Action:
        - events:PutEvents
      Resource: '*' # set permission to eventbus default or create new one
  events:
    # - schedule: ${self:custom.functionsWarmUpScheduledEvent}
    - http:
        path: companies/{id}/data
        method: DELETE
        cors: ${self:custom.httpCors}
        private: false
  package:
    patterns:
      - 'src/v1/deleteDataByCompany/**'

ingestionDispatcher:
  handler: src/index.handler
  iamRoleStatementsName: ${self:custom.basename}-ingestionDispatcher-role
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource:
        - Fn::GetAtt: [ IngestionQueue, Arn ]
  events:
    - schedule:
        name: ${self:custom.basename}-ingestionDispatcher-eventRule-1
        rate: ${self:custom.ingestionDispatcherSchedule1.${self:provider.stage}.rate}
        enabled: ${self:custom.ingestionDispatcherSchedule1.${self:provider.stage}.enabled}
    - schedule:
        name: ${self:custom.basename}-ingestionDispatcher-eventRule-2
        rate: ${self:custom.ingestionDispatcherSchedule2.${self:provider.stage}.rate}
        enabled: ${self:custom.ingestionDispatcherSchedule2.${self:provider.stage}.enabled}
    - schedule:
        name: ${self:custom.basename}-ingestionDispatcher-eventRule-3
        rate: ${self:custom.ingestionDispatcherSchedule3.${self:provider.stage}.rate}
        enabled: ${self:custom.ingestionDispatcherSchedule3.${self:provider.stage}.enabled}
  package:
    patterns:
      - 'src/v1/ingestionDispatcher/**'

ingestionPerformer:
  handler: src/index.handler
  memorySize: 1024
  timeout: 900
  iamRoleStatementsName: ${self:custom.basename}-ingestionPerformer-role
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource:
        - Fn::GetAtt: [ DataExportQueue, Arn ]
  events:
    - sqs:
        arn:
          Fn::GetAtt: [ IngestionQueue, Arn ]
        batchSize: 1
  package:
    patterns:
      - 'src/v1/ingestionPerformer/**'

dataExport:
  handler: src/index.handler
  memorySize: ${self:custom.dataExport.${self:provider.stage}.memorySize}
  timeout: 900
  iamRoleStatementsName: ${self:custom.basename}-dataExport-role
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource:
        - Fn::Join: ['', [Fn::GetAtt: [ DataExportBucket, Arn ], '/*']]
  events:
    - sqs:
        arn:
          Fn::GetAtt: [ DataExportQueue, Arn ]
        batchSize: 1
    - eventBridge:
        pattern:
          source:
            - ${self:custom.basename}
          detail-type:
            - ${self:custom.basename}.dataExport
  package:
    patterns:
      - 'src/v1/dataExport/**'